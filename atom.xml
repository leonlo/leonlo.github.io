<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小萝卜的坑</title>
  
  <subtitle>404 Not Found</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-18T02:08:08.209Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>一只普通的码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>办公室神游记</title>
    <link href="http://yoursite.com/2017/01/06/%E5%8A%9E%E5%85%AC%E5%AE%A4%E7%A5%9E%E6%B8%B8%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/06/办公室神游记/</id>
    <published>2017-01-06T04:00:54.000Z</published>
    <updated>2018-07-18T02:08:08.209Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>2017-06-07 13:52<br>不再犹豫</p><p>2017-05-16 09:57<br>像玻璃杯，一碰就会碎。</p><hr><p>2017-05-16 10:15<br>生活原本是无趣的，工作原本是枯燥的。但你真的不能让原本只是原本……</p><hr><p>2017-05-08 17:07<br>再这样被委以“重任”，我真的要成全干工程师了啊。（苦笑）</p><hr><p>2017-04-19 10:01<br>入职新公司半年了，真的快成全干工程师了。</p><hr><p>2017-03-29 10:05<br>找自己</p><hr><p>2017-01-25 11:30<br>知乎问题：<em><a href="https://www.zhihu.com/question/24134400/answer/39778765" target="_blank" rel="noopener">喜欢上了洗浴中心技师，我是不是很low？如果想要进一步，我该怎么做？</a></em></p><p>虽然没有过这样的经历，但是我竟然有些感动，我是不是三观不正啊……</p><hr><p>2017-01-06 12:00<br>是在意赐予了折磨的权利</p><hr><p>2016-03-28 17:01<br>「情怀」太私人化，自己的也许在他人眼里一文不值。不过那又怎样？</p><hr><p>2016-03-24 14:23<br>「做想做的事」境界太高，我还是去追求「不做不想做的事」吧。</p><hr><p>2016-03-21 18:02</p><p>Time You Enjoy Wasting is Not Wasted Time.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;2017-06-07 13:52&lt;br&gt;不再犹豫&lt;/p&gt;
&lt;p&gt;2017-05-16 09:57&lt;br&gt;像玻璃杯，一碰就会碎。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2017-05-16 
      
    
    </summary>
    
    
      <category term="乱七八糟" scheme="http://yoursite.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>在macOS下使用VSCode搭建Go开发环境</title>
    <link href="http://yoursite.com/2016/09/27/%E5%9C%A8macOS%E4%B8%8B%E4%BD%BF%E7%94%A8VSCode%E6%90%AD%E5%BB%BAGo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2016/09/27/在macOS下使用VSCode搭建Go开发环境/</id>
    <published>2016-09-27T15:35:39.000Z</published>
    <updated>2018-07-17T07:07:07.667Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>安装Go，可以在<a href="http://golang.org/" target="_blank" rel="noopener">golang.org</a>下载（下载最新的），在Terminal中键入<code>go</code>可以看到所有支持的commond，这意味着你的Go已经装好了</p><p>  <strong>注意事项</strong>：Go安装完毕后一定要配置好<code>GOPATH</code>这个环境变量，不然你的VSCode将无法成功部署。</p></li><li>去微软的<a href="">VSCode官网</a>下载VSCode并安装</li></ul><h2 id="vscode-go插件及常用扩展依赖工具"><a href="#vscode-go插件及常用扩展依赖工具" class="headerlink" title="vscode-go插件及常用扩展依赖工具"></a>vscode-go插件及常用扩展依赖工具</h2><ul><li><p>安装vscode-go</p><p>  在VSCode中cmd+shift+P，输入框中输入<code>ext install</code>，回车，在「扩展」面板输入框中输入Go，待服务器返回最新的地址后，点击安装，然后重启，此时你的vscode-go已经安装完毕。</p></li><li><p>常用工具</p><p>  vscode-go 插件需要一些额外的工具，安装它们你只需要复制到Terminal中执行即可，它们会安装到你的<code>GOPATH</code>目录下。</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#gocode: </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v github.<span class="keyword">com</span>/nsf/gocode</span><br><span class="line">#godef: </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v github.<span class="keyword">com</span>/rogpeppe/godef</span><br><span class="line">#golin<span class="variable">t:</span> </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v github.<span class="keyword">com</span>/golang/lint/golint</span><br><span class="line">#go-outline: </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v github.<span class="keyword">com</span>/lukehoban/<span class="keyword">go</span>-outline</span><br><span class="line">#goreturn<span class="variable">s:</span> </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v sourcegraph.<span class="keyword">com</span>/sqs/goreturns</span><br><span class="line">#gorename: </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v golang.org/<span class="keyword">x</span>/tools/cmd/gorename</span><br><span class="line">#gopkg<span class="variable">s:</span> </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v github.<span class="keyword">com</span>/tpng/gopkgs</span><br><span class="line">#go-symbol<span class="variable">s:</span> </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v github.<span class="keyword">com</span>/newhook/<span class="keyword">go</span>-symbols</span><br><span class="line">#guru: </span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> -v golang.org/<span class="keyword">x</span>/tools/cmd/guru</span><br></pre></td></tr></table></figure><p>注：一条一条执行很累人的，你可以简单写进一个脚本，执行脚本。网络条件良好的情况下，去抽根烟回来就好了。</p><h2 id="使VSCode支持Go语言调试"><a href="#使VSCode支持Go语言调试" class="headerlink" title="使VSCode支持Go语言调试"></a>使VSCode支持Go语言调试</h2><ol><li><p>安装调试工具delve，打开Termina输入如下命令。</p> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#delve项目中安装文档表示如果你安装了homebrew可以通过 <span class="string">"brew install go-delve/delve/delve"</span> 来安装（我失败了）。</span></span><br><span class="line">go get -v -u github.com<span class="meta-keyword">/peterh/</span>liner github.com<span class="meta-keyword">/derekparker/</span>delve<span class="meta-keyword">/cmd/</span>dlv</span><br></pre></td></tr></table></figure></li><li><p>由于调试工具没有代码签名，此时在Mac下是无法正常使用VSCode调试Go程序的，可以通过如下几个步骤解决问题。</p><ul><li>打开<code>keychain</code>钥匙串访问</li><li>打开菜单，选择「证书助理」-&gt;「创建证书」</li><li>输入一个名字，比如dlv-cert，然后将<strong>identify type</strong>（身份类型）设置为<strong>self signed root</strong>（自签名根证书），将<strong>certificate type</strong>（证书类型）设置为<strong>code signing</strong>（代码签名），然后选择<strong>let me override defaults</strong>（让我覆盖这些默认值）</li><li>点击continue，此处你可以调整一下证书的过期时间，如将默认的365改为3650</li><li>继续点击continue直到你看到<strong>specify a location for the certificate</strong>（指定该证书用于的位置），选择<strong>system</strong><br>如果不能就选择login，然后导出到system的keychain中</li><li>在keychains里选择system，然后就可以找到新建的证书，右键点击证书，选择<strong>get info</strong>（显示简介），打开trust选项，然后将code signing设置为<strong>always trust</strong></li><li>（<strong>Yosemite</strong>）在keychain里选择keys，然后找到证书，右键点击，选择get info，然后选择access control标签，选择allow all applications to access this item，然后保存设置</li><li>退出keychain，杀死<code>taskgated</code>进程重启该服务，或者直接重启电脑</li><li>重新编译出带有代码签名的dlv执行程序。打开Termina进入<code>$GOPATH/src/github.com/derekparker/delve</code>，如果你的Go版本为1.5你必须先执行<code>GO15VENDOREXPERIMENT=1</code>命令，接下来输入<code>CERT=dlv-cert make install</code>命令，这样就可以重新编译出一个带有代码签名的dlv。</li></ul></li></ol><blockquote><p>参考文档</p></blockquote><blockquote><ul><li><a href="https://github.com/Microsoft/vscode-go" target="_blank" rel="noopener">https://github.com/Microsoft/vscode-go</a></li><li><a href="https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md" target="_blank" rel="noopener">https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装Go，可以在&lt;a 
      
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="IT" scheme="http://yoursite.com/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>原来isKindOfClass并非那么可靠</title>
    <link href="http://yoursite.com/2016/01/21/%E5%8E%9F%E6%9D%A5isKindOfClass%E5%B9%B6%E9%9D%9E%E9%82%A3%E4%B9%88%E5%8F%AF%E9%9D%A0/"/>
    <id>http://yoursite.com/2016/01/21/原来isKindOfClass并非那么可靠/</id>
    <published>2016-01-21T03:15:29.000Z</published>
    <updated>2018-07-17T07:07:07.667Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从正式开发iOS的那天起，我便了解<strong>-isKindOfClass:</strong>可以用来确定一个对象是否是一个类的成员，也可以用来确定一个对象是否是派生自该类的类的成员。可实际上它并不值得被信任。</p><p>下面以<strong>NSURLSessionDataTask</strong>这个类来阐述为什么<strong>isKindOfClass</strong>并不可靠。</p><p>我们可以打印出<strong>NSURLSessionDataTask</strong>的继承树，代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NSURLSessionDataTask</span> *task = [[<span class="symbol">NSURLSession</span> sharedSession] dataTaskWithURL:[<span class="symbol">NSURL</span> <span class="symbol">URLWithString</span>:@<span class="string">"http://blog.leonluo.com"</span>]];</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%@"</span>, [task class]);</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%@"</span>, [task superclass]);</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%@"</span>, [[task superclass] superclass]);</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%@"</span>, [[[task superclass] superclass] superclass]);</span><br></pre></td></tr></table></figure><p>在iOS8以上的结果是：</p><pre><code>__NSCFLocalDataTask__NSCFLocalSessionTaskNSURLSessionTaskNSObject</code></pre><p>在iOS7上的结果是：</p><pre><code>__NSCFLocalDataTask__NSCFLocalSessionTask__NSCFURLSessionTaskNSObject</code></pre><p>如果我们去问，我们建立的这些<strong>data task</strong>到底是不是<strong>NSURLSessionDataTask</strong>，调用<br><strong>[task isKindOfClass:[NSURLSessionDataTask class]]</strong>，得到的结果还是YES，可事实上它来自<strong>__NSCFLocalDataTask</strong>。           </p><p>其实<strong>-isKindOfClass:</strong>是可以override掉的，所以，即使<strong>__NSCFLocalDataTask</strong>根本就不是<strong>NSURLSessionDataTask</strong>，但我们可以把<strong>__NSCFLocalDataTask</strong>的<strong>-isKindOfClass:</strong>写成这样：</p><pre><code>- (BOOL)isKindOfClass:(Class)aClass{    if (aClass == NSClassFromString(@&quot;NSURLSessionDataTask&quot;)) {    return YES;    }    if (aClass == NSClassFromString(@&quot;NSURLSessionTask&quot;)) {    return YES;    }    return [super isKindOfClass:aClass];}</code></pre><blockquote><ul><li>无论是iOS8还是iOS7我们建立的data task，都不是直接产生<strong>NSURLSessionDataTask</strong>，而是产生<strong>__NSCFLocalDataTask</strong>这样的<strong>private class</strong>。</li><li><strong>-isKindOfClass:</strong>并不那么可靠。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;从正式开发iOS的那天起，我便了解&lt;strong&gt;-isKindOfClass:&lt;/strong&gt;可以用来确定一个对象是否是一个类的成员，也可以用来确定一个对象是否是派生自该
      
    
    </summary>
    
      <category term="objc" scheme="http://yoursite.com/categories/objc/"/>
    
    
      <category term="IT" scheme="http://yoursite.com/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://yoursite.com/2015/12/23/%E6%97%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2015/12/23/无题/</id>
    <published>2015-12-23T09:49:13.000Z</published>
    <updated>2018-07-17T07:07:07.668Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h5 id="rm-rf-life-2015-memory-bad"><a href="#rm-rf-life-2015-memory-bad" class="headerlink" title="rm -rf ~/life/2015/memory/bad/"></a>rm -rf ~/life/2015/memory/bad/</h5><h5 id="init-new-year"><a href="#init-new-year" class="headerlink" title="./init_new_year"></a>./init_new_year</h5><h5 id="touch-life-2016-wishes-first"><a href="#touch-life-2016-wishes-first" class="headerlink" title="touch ~/life/2016/wishes/first"></a>touch ~/life/2016/wishes/first</h5><h5 id="echo-“Everything-will-be-okay-”-gt-life-2016-wishes-first"><a href="#echo-“Everything-will-be-okay-”-gt-life-2016-wishes-first" class="headerlink" title="echo “Everything will be okay.”&gt;~/life/2016/wishes/first"></a>echo “Everything will be okay.”&gt;~/life/2016/wishes/first</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h5 id=&quot;rm-rf-life-2015-memory-bad&quot;&gt;&lt;a href=&quot;#rm-rf-life-2015-memory-bad&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="矫情" scheme="http://yoursite.com/categories/%E7%9F%AB%E6%83%85/"/>
    
    
  </entry>
  
</feed>
